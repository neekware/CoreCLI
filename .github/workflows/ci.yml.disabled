name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feat/**'
      - 'fix/**'
      - 'chore/**'
      - 'release/**'
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run at 00:00 UTC every Monday to catch dependency issues
    - cron: '0 0 * * 1'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        type: boolean
        required: false
        default: false

env:
  PYTHON_VERSION_DEFAULT: '3.11'
  PIP_CACHE_DIR: ~/.cache/pip
  PRE_COMMIT_HOME: ~/.cache/pre-commit

jobs:
  # Quick syntax and format check
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: 📦 Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-lint-${{ hashFiles('pyproject.toml', '.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-lint-
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e '.[dev]'
    
    - name: 🎨 Check code formatting with Black
      run: black . --check --diff --color
    
    - name: 🔍 Lint with Ruff
      run: ruff check . --output-format=github
    
    - name: 📝 Check import sorting
      run: ruff check . --select I --diff
    
    - name: 🔒 Security check with Bandit
      continue-on-error: true
      run: |
        pip install bandit[toml]
        bandit -r commands/ -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "::warning::Security issues found. Check bandit-report.json"
        fi

  # Type checking
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: 📦 Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-typecheck-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-typecheck-
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[dev]'
    
    - name: 🔍 Type check with mypy
      run: |
        mypy commands --junit-xml mypy-report.xml
    
    - name: 📊 Upload mypy results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mypy-results
        path: mypy-report.xml

  # Main test job - matrix across Python versions and OS
  test:
    name: Test (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    needs: [lint, typecheck]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        exclude:
          # Exclude some combinations to save CI time
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e '.[dev]'
    
    - name: 🏗️ Verify installation
      run: |
        python -m commands --version
        cli --version || python -m commands --version
    
    - name: 🧪 Run unit tests with coverage
      run: |
        pytest commands/tests/ -v --cov=commands --cov-report=xml --cov-report=term-missing --junit-xml=pytest-report.xml
    
    - name: 📊 Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          pytest-report.xml
          coverage.xml
    
    - name: 📈 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # CLI integration tests
  cli-test:
    name: CLI Integration Tests
    needs: [lint, typecheck]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.11', '3.13']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Install package
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install with runtime dependencies
        pip install -e .
        # Verify dependencies are installed
        python -c "import click; print(f'Click installed: {click.__version__}')"
    
    - name: 🎯 Test CLI help commands
      run: |
        echo "::group::Main help"
        cli --help
        echo "::endgroup::"
        
        echo "::group::Version info"
        cli --version
        cli version
        echo "::endgroup::"
        
        echo "::group::Command group help"
        cli proj --help
        cli dev --help
        cli build --help
        cli package --help
        cli release --help
        echo "::endgroup::"
    
    - name: 🎯 Test project commands
      run: |
        echo "::group::Project info"
        cli proj info || echo "Git not initialized, skipping"
        echo "::endgroup::"
        
        echo "::group::Project size"
        cli proj size
        echo "::endgroup::"
        
        echo "::group::Project stats"
        cli proj stats
        echo "::endgroup::"
    
    - name: 🎯 Test development commands
      run: |
        # Install dev dependencies for these tests
        pip install -e '.[dev]'
        
        echo "::group::Format check"
        cli dev format --check
        echo "::endgroup::"
        
        echo "::group::Lint check"
        cli dev lint
        echo "::endgroup::"
        
        echo "::group::Type check"
        cli dev typecheck
        echo "::endgroup::"
        
        echo "::group::Run tests"
        cli dev test
        echo "::endgroup::"
    
    - name: 🎯 Test build commands (dry-run)
      run: |
        echo "::group::Build all"
        cli build all --target linux --arch x86_64 --force || echo "Placeholder command"
        echo "::endgroup::"
        
        echo "::group::Build clean"
        cli build clean --force || echo "Placeholder command"
        echo "::endgroup::"
    
    - name: 🎯 Test package commands (dry-run)
      run: |
        echo "::group::Package build"
        cli package build --format wheel --dry-run || echo "Placeholder command"
        echo "::endgroup::"
        
        echo "::group::Package list"
        cli package list || echo "Placeholder command"
        echo "::endgroup::"
    
    - name: 🎯 Test release commands (dry-run)
      run: |
        echo "::group::Release create"
        cli release create --version 1.0.0 --dry-run || echo "Placeholder command"
        echo "::endgroup::"
        
        echo "::group::Release list"
        cli release list || echo "Placeholder command"
        echo "::endgroup::"
    
    - name: 🎯 Test error handling
      run: |
        echo "::group::Invalid command"
        cli invalid-command 2>&1 | grep -q "Error" || echo "Error handling works"
        echo "::endgroup::"
        
        echo "::group::Invalid option"
        cli proj --invalid-option 2>&1 | grep -q "Error\\|no such option" || echo "Option validation works"
        echo "::endgroup::"

  # Test installation methods
  install-test:
    name: Installation Test
    needs: [lint, typecheck]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        install-method: [pip, setup.sh, editable]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: 📦 Test pip installation
      if: matrix.install-method == 'pip'
      run: |
        python -m venv test-env
        source test-env/bin/activate
        pip install --upgrade pip
        pip install .
        cli --version
        cli --help
        deactivate
        rm -rf test-env
    
    - name: 📦 Test setup.sh installation
      if: matrix.install-method == 'setup.sh'
      run: |
        chmod +x setup.sh
        ./setup.sh
        source .venv/bin/activate
        cli --version
        cli --help
        cli dev all
    
    - name: 📦 Test editable installation
      if: matrix.install-method == 'editable'
      run: |
        python -m venv test-env
        source test-env/bin/activate
        pip install --upgrade pip
        pip install -e '.[dev]'
        cli --version
        python -m commands --version
        deactivate

  # Documentation build test
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: 📚 Check README
      run: |
        # Check for broken links in README
        pip install markdown-link-check || echo "Skipping link check"
        
        # Check README exists and has content
        test -f README.md
        test -s README.md
        echo "README.md exists and has content ✓"
    
    - name: 📚 Check documentation files
      run: |
        # Check important files exist
        for file in README.md LICENSE CLAUDE.md .gitignore; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "✗ $file missing"
            exit 1
          fi
        done
    
    - name: 📚 Validate pyproject.toml
      run: |
        pip install tomli
        python -c "import tomli; tomli.load(open('pyproject.toml', 'rb'))"
        echo "pyproject.toml is valid ✓"

  # Pre-commit hooks test
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: 🔧 Run pre-commit
      uses: pre-commit/action@v3.0.1
      with:
        extra_args: --all-files --show-diff-on-failure

  # Final status check
  status:
    name: CI Status Check
    if: always()
    needs: [lint, typecheck, test, cli-test, install-test, docs, pre-commit]
    runs-on: ubuntu-latest
    
    steps:
    - name: 📊 Check status
      run: |
        if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
          echo "❌ One or more jobs failed"
          exit 1
        elif [ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]; then
          echo "⚠️ One or more jobs were cancelled"
          exit 1
        else
          echo "✅ All jobs passed successfully!"
        fi